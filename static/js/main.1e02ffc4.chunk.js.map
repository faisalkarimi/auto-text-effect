{"version":3,"sources":["components/AutoTextEffect.js","App.js","reportWebVitals.js","index.js"],"names":["AutoTextEffect","useState","textArray","setTextArray","speed","setSpeed","textValue","textIndex","useEffect","writeText","text","slice","length","setTimeout","className","htmlFor","type","name","id","value","min","max","step","onChange","e","target","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sNA4CeA,EA1CQ,WACrB,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA0BF,mBAAS,GAAnC,mBAAOG,EAAP,KAAcC,EAAd,KAEMC,EAAY,uBACdC,EAAY,EAgBhB,OAdAC,qBAAU,YACU,SAAZC,IACJ,IAAMC,EAAOJ,EAAUK,MAAM,EAAGJ,GAChCJ,EAAaO,KACbH,GACiBD,EAAUM,OACzBC,WAAWJ,EAAW,IAAML,GAE5BG,EAAY,EAGhBE,KACC,CAACL,EAAOE,EAAWC,IAGpB,qCACE,6BAAKL,IAEL,sBAAKY,UAAU,QAAf,UACE,uBAAOC,QAAQ,QAAf,oBACA,uBACEC,KAAK,SACLC,KAAK,QACLC,GAAG,QACHC,MAAOf,EACPgB,IAAI,IACJC,IAAI,KACJC,KAAK,IACLC,SAAU,SAACC,GAAD,OAAOnB,EAASmB,EAAEC,OAAON,iBC9B9BO,MAJf,WACE,OAAO,cAAC,EAAD,KCQMC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.1e02ffc4.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nconst AutoTextEffect = () => {\n  const [textArray, setTextArray] = useState([]);\n  const [speed, setSpeed] = useState(1);\n\n  const textValue = \"We Love Programming!\";\n  let textIndex = 1;\n\n  useEffect(() => {\n    const writeText = () => {\n      const text = textValue.slice(0, textIndex);\n      setTextArray(text);\n      textIndex++;\n      if (textIndex <= textValue.length) {\n        setTimeout(writeText, 300 / speed);\n      } else {\n        textIndex = 1;\n      }\n    };\n    writeText();\n  }, [speed, textValue, textIndex]);\n\n  return (\n    <>\n      <h1>{textArray}</h1>\n\n      <div className=\"speed\">\n        <label htmlFor=\"speed\">Speed:</label>\n        <input\n          type=\"number\"\n          name=\"speed\"\n          id=\"speed\"\n          value={speed}\n          min=\"1\"\n          max=\"10\"\n          step=\"1\"\n          onChange={(e) => setSpeed(e.target.value)}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default AutoTextEffect;\n","import \"./App.css\";\nimport AutoTextEffect from \"./components/AutoTextEffect\";\n\nfunction App() {\n  return <AutoTextEffect />;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}